#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  // TODO: Implement first fit
  int first_fit_id = -1;
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size) {
      first_fit_id = free_list_ptr->id;
      break;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return first_fit_id; // will return -1 if first fit not found
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = -1;
  // TODO: Implement best fit
  struct header *temp = free_list_ptr;
  uint64_t best_size = 99999;
  while (free_list_ptr != NULL) {
    uint64_t num = free_list_ptr->size;
    if (num >= size) {
      if (num < best_size) {
        temp = free_list_ptr;
        best_size = num;
      }
    }
    free_list_ptr = free_list_ptr->next;
  }

  best_fit_id = (best_size == 99999) ? -1 : temp->id;
  free(temp);
  return best_fit_id;  // return -1 when best fit not found
}

int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = -1;
  // TODO: Implement worst fit
  struct header *temp = free_list_ptr;
  uint64_t worst_size = 0;
  while (free_list_ptr != NULL) {
    uint64_t num = free_list_ptr->size;
    if (num >= size) {
      if (num > worst_size) {
        temp = free_list_ptr;
        worst_size = num;
      }
    }
    free_list_ptr = free_list_ptr->next;
  }

  if (worst_size == 0) // Worst fit not found
    return -1;

  worst_fit_id = (worst_size == 0) ? -1 : temp->id;
  free(temp);

  return worst_fit_id;
}

int main(void) {

  struct header *free_block1 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block2 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block3 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block4 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block5 = (struct header *)malloc(sizeof(struct header));

  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  // TODO: Print out the IDs
  printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
  printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
  printf("The ID for Worst_Fit algorithm is: %d\n", worst_fit_id);

  return 0;
}
