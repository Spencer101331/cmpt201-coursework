#define _POSIX_C_SOURCE 200809L
#define _DEFAULT_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#define block_size 128

struct header {
  uint64_t size;
  struct header *next;
};

void initialize_block(struct header *head, struct header *next, int value){
  head->size = block_size;
  head->next = next;
  memset(head, value, block_size);
}

void print_out(char *format, void *data, size_t data_size){
  char buf[block_size];
  ssize_t len = snprintf(buf, block_size, format, 
      data_size == sizeof(uint64_t) ? *(uint64_t *)data : *(void **)data);
  if (len < 0){
    perror("snprintf");
    exit(1);
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  int total = block_size*2;
  void *start_address = sbrk(total);
  if (start_address == (void *)-1) {
    perror("sbrk() failed");
    return 1;
  }

  struct header *first_block = (struct header *)start_address;
  struct header *second_block = (struct header *)(start_address + block_size);

  initialize_block(first_block, NULL, 0);
  initialize_block(second_block, first_block, 1);

  printf("first block:       %p\n", first_block);
  printf("second bolck:      %p\n", second_block);
  printf("fisrt block size:  %lu\n", first_block->size);
  printf("first block next:  %p\n", first_block->next);
  printf("second block size: %lu\n", second_block->size);
  printf("second block next: %p\n", second_block->next);

  return 0;
}
